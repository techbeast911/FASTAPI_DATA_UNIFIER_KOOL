
from sqlmodel import SQLModel, Field, Column
import sqlalchemy.dialects.postgresql as pg
import uuid
from datetime import datetime
from typing import Optional # Ensure Optional is imported for flexibility

class Battery(SQLModel , table=True):
    __tablename__ = "battery"
    __table_args__ = {"schema": "kool_assembly"}

    # FIX 1: Add default_factory for uid generation
    uid: uuid.UUID = Field(
        default_factory=uuid.uuid4, # This ensures a UUID is generated by Pydantic/SQLModel
        sa_column=Column(
            pg.UUID,
            primary_key=True,
            unique=True,
            nullable=False
        )
    )
    
    created_at : datetime = Field(
        default_factory=datetime.now, 
        sa_column=Column(pg.TIMESTAMP, nullable=False) 
    )
    updated_at: Optional[datetime] = Field(
        default_factory=datetime.now,
        sa_column=Column(pg.TIMESTAMP(timezone=True), onupdate=datetime.now, nullable=True) # nullable=True allows it to be null initially if DB schema allows
    )
    customer_name : str
    product_sku : str
    product_serial_number : str
    field_technician : str
    condition : str
    receiver : str
    faulty_component : str
    remedy : str
    product_category_new_ref : str
    date_sent_out : datetime = Field( 
        default_factory=datetime.now, 
        sa_column=Column(pg.TIMESTAMP, nullable=False)
    )

    def __repr__(self) -> str:
        return f"Battery {self.field_technician}"

